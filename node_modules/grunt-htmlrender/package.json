{
  "name": "grunt-htmlrender",
  "description": "Renders html by including its partials",
  "version": "0.1.1",
  "homepage": "https://github.com/skuligowski/grunt-htmlrender",
  "author": {
    "name": "Sebastian Kuligowski"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/skuligowski/grunt-htmlrender.git"
  },
  "bugs": {
    "url": "https://github.com/skuligowski/grunt-htmlrender/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/skuligowski/grunt-htmlrender/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "lodash": "~2.4.x"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.9.2",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt": "~0.4.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.5"
  },
  "keywords": [
    "gruntplugin",
    "html",
    "render html",
    "include partials",
    "angular",
    "template"
  ],
  "readme": "# grunt-htmlrender\r\n\r\n> Renders html by including its partials\r\n\r\n## About\r\nOrganize your project by creating small partials (html files). Then include those partials into the one html output file by using `<%include src=\"path/to/partial.html\"%>` macro. This is the common way how a server-side templating engines  work (eg. PHP, JSP, Freemarker etc.). Now the same thing you can do on the client side, just after saving your document.\r\n\r\n## Getting started\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-htmlrender');\r\n```\r\n\r\n## The \"htmlrender\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `htmlrender` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  htmlrender: {\r\n    build: {\r\n      options: {\r\n        src: ['src/**/*.html'],\r\n        vars: {\r\n          myVariable: 'someValue'\r\n        }\r\n      },\r\n      files: [{\r\n        expand: true,\r\n        cwd: 'src',\r\n        src: ['*.html'],\r\n        dest: 'dist',\r\n        ext: '.html'\r\n      }]\r\n    },\r\n  },\r\n});\r\n```\r\n\r\n### Options\r\n\r\n#### options.src\r\nType: `String`\r\nDefault value: `*.html`\r\n\r\nAll partials that should be used to compose output html file.\r\n\r\n#### options.vars\r\nType: `Object`\r\nDefault value: `{}`\r\n\r\nVariables that you can put inside your partial files: `<%=myVariable%>`. After rendering the output html those variables will be interpolated with the values from defined `vars` object.\r\n\r\n```js\r\nvars: {\r\n  myVariable: 'someValue'\r\n}\r\n```\r\n\r\n```html\r\n<div><%=myVariable%></div>\r\n```\r\n\r\nwill generate:\r\n\r\n```html\r\n<div>someValue</div>\r\n```\r\n\r\nThe interpolation of variables is usually used to replace some paths inside of the html file (such as scripts path, css path etc).\r\n\r\nInstead of any hardcoded value you can use a function for the interpolation process:\r\n\r\n```js\r\nvars: {\r\n  lastChange: function() {\r\n    return formatCurrentDate(new Date());\r\n  }\r\n}\r\n```\r\n\r\n#### options.files\r\nType: `List`\r\n\r\nThe list of output files that this task should generate in their destinations.\r\n\r\n### Usage Examples\r\n\r\n#### Default Options\r\nIn this example, there is `src/index.html` file and one partial file `src/tpl/partial.html`. \r\n\r\nsrc/index.html\r\n```html\r\n<div>Hello world</div>\r\n<div>\r\n  <%include src=\"tpl/partal.html\"%>\r\n</div>\r\n```\r\n\r\nsrc/tpl/partial.html\r\n```html\r\n<div class=\"partial\">Hello, I'm the partial</div>\r\n```\r\n\r\ndist/index.html\r\n```js\r\ngrunt.initConfig({\r\n  htmlrender: {\r\n    build: {\r\n      options: {\r\n        src: ['src/tpl/*.html']\r\n      },\r\n      files: [{\r\n        expand: true,\r\n        cwd: 'src',\r\n        src: ['index.html'],\r\n        dest: 'dist',\r\n        ext: '.html'\r\n      }]\r\n    },\r\n  },\r\n});\r\n```\r\n\r\nAfter interpolation you will find `dist/index.html` with the following content:\r\n\r\n```html\r\n<div>Hello world</div>\r\n<div>\r\n  <div class=\"partial\">Hello, I'm the partial</div>\r\n</div>\r\n```\r\n\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n",
  "readmeFilename": "README.md",
  "gitHead": "3958ef6ca79516b115be748ce90ad6ca212b507e",
  "_id": "grunt-htmlrender@0.1.1",
  "_shasum": "175673ae530e3d213cf4a6780b8cd7b79acb10e9",
  "_from": "git://github.com/skuligowski/grunt-htmlrender.git#master",
  "_resolved": "git://github.com/skuligowski/grunt-htmlrender.git#3958ef6ca79516b115be748ce90ad6ca212b507e"
}
